name: Preview Database Seed

on:
  pull_request:
    types: [opened, synchronize, reopened]
    branches:
      - dev

  workflow_dispatch:

permissions:
  contents: read
  id-token: write

jobs:
  preview-db-create:
    runs-on: self-hosted
    environment: dev-db-backups
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install PostgreSQL 17
        run: |
          sudo apt-get update
          sudo sh -c 'echo "deb http://apt.postgresql.org/pub/repos/apt $(lsb_release -cs)-pgdg main" > /etc/apt/sources.list.d/pgdg.list'
          wget --quiet -O - https://www.postgresql.org/media/keys/ACCC4CF8.asc | sudo tee /etc/apt/trusted.gpg.d/pgdg.asc &>/dev/null
          sudo apt-get update
          sudo apt-get install postgresql-17 postgresql-client-17 -y
          psql --version

      - name: Create database backup
        id: backup
        env:
          PGHOST: ${{ secrets.PGHOST }}
          PGUSER: ${{ secrets.PGUSER }}
          PGPORT: ${{ secrets.PGPORT }}
          PGPASSWORD: ${{ secrets.PGPASSWORD }}
          PGDATABASE: ${{ secrets.PGDATABASE }}
        run: |
          TIMESTAMP=$(date +"%Y-%m-%d-%H%M%S")
          FORMATTED_REF=$(echo ${{ github.ref_name }} | sed 's/\//-/g')
          export BACKUP_FILENAME=monorepo-${FORMATTED_REF}-${{ github.sha }}-${TIMESTAMP}.sql
          echo "[LOG] backup filename: $BACKUP_FILENAME"
          echo "[LOG] pg_dump version: $(pg_dump --version)"
          pg_dump -Fc -U $PGUSER -d $PGDATABASE -h $PGHOST -p $PGPORT -f $BACKUP_FILENAME
          echo "backup_file=$(pwd)/$BACKUP_FILENAME" >> $GITHUB_OUTPUT

      - name: Create preview database from backup (if not exists)
        env:
          PGHOST: ${{ secrets.PGHOST }}
          PGUSER: ${{ secrets.PGUSER }}
          PGPORT: ${{ secrets.PGPORT }}
          PGPASSWORD: ${{ secrets.PGPASSWORD }}
          PGDATABASE: ${{ secrets.PGDATABASE }}
        run: |
          BACKUP_FILENAME="${{ steps.backup.outputs.backup_file }}"
          PREVIEW_DB="preview-${{ github.event.pull_request.number }}"

          echo "[LOG] Checking if preview DB exists: $PREVIEW_DB"
          DB_EXISTS=$(psql -h $PGHOST -U $PGUSER -p $PGPORT -tAc "SELECT 1 FROM pg_database WHERE datname='$PREVIEW_DB'")

          if [ "$DB_EXISTS" = "1" ]; then
            echo "[LOG] Database $PREVIEW_DB already exists. Skipping creation and restore."
          else
            echo "[LOG] Creating preview DB: $PREVIEW_DB"
            createdb -h $PGHOST -U $PGUSER -p $PGPORT $PREVIEW_DB

            echo "[LOG] Restoring backup into preview DB"
            pg_restore -U $PGUSER -d $PREVIEW_DB -h $PGHOST -p $PGPORT -Fc "$BACKUP_FILENAME"
          fi

      - name: Remove local backup file
        run: |
          rm ${{ steps.backup.outputs.backup_file }}
